{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-email","text":"<p><code>prefect-email</code> is a collection of prebuilt Prefect integrations that can be used to interact with email services.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#integrate-with-prefect-flows","title":"Integrate with Prefect flows","text":"<p><code>prefect-email</code> makes sending emails effortless, giving you peace of mind that your emails are being sent as expected.</p> <p>First, install prefect-email and save your email credentials to a block to run the examples below!</p> <pre><code>from prefect import flow\nfrom prefect_email import EmailServerCredentials, email_send_message\n\n@flow\ndef example_email_send_message_flow(email_addresses: List[str]):\n    email_server_credentials = EmailServerCredentials.load(\"BLOCK-NAME-PLACEHOLDER\")\n    for email_address in email_addresses:\n        subject = email_send_message.with_options(name=f\"email {email_address}\").submit(\n            email_server_credentials=email_server_credentials,\n            subject=\"Example Flow Notification using Gmail\",\n            msg=\"This proves email_send_message works!\",\n            email_to=email_address,\n        )\n\nexample_email_send_message_flow([\"EMAIL-ADDRESS-PLACEHOLDER\"])\n</code></pre> <p>Outputs:</p> <pre><code>16:58:27.646 | INFO    | prefect.engine - Created flow run 'busy-bat' for flow 'example-email-send-message-flow'\n16:58:29.225 | INFO    | Flow run 'busy-bat' - Created task run 'email someone@gmail.com-0' for task 'email someone@gmail.com'\n16:58:29.229 | INFO    | Flow run 'busy-bat' - Submitted task run 'email someone@gmail.com-0' for execution.\n16:58:31.523 | INFO    | Task run 'email someone@gmail.com-0' - Finished in state Completed()\n16:58:31.713 | INFO    | Flow run 'busy-bat' - Finished in state Completed('All states completed.')\n</code></pre> <p>Please note, many email services, like Gmail, require an App Password to successfully send emails. If you encounter an error similar to <code>smtplib.SMTPAuthenticationError: (535, b'5.7.8 Username and Password not accepted...</code>, it's likely you are not using an App Password.</p>"},{"location":"#capture-exceptions-and-notify-by-email","title":"Capture exceptions and notify by email","text":"<p>Perhaps you want an email notification with the details of the exception when your flow run fails.</p> <p><code>prefect-email</code> can be wrapped in an <code>except</code> statement to do just that!</p> <pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_email import EmailServerCredentials, email_send_message\n\ndef notify_exc_by_email(exc):\n    context = get_run_context()\n    flow_run_name = context.flow_run.name\n    email_server_credentials = EmailServerCredentials.load(\"email-server-credentials\")\n    email_send_message(\n        email_server_credentials=email_server_credentials,\n        subject=f\"Flow run {flow_run_name!r} failed\",\n        msg=f\"Flow run {flow_run_name!r} failed due to {exc}.\",\n        email_to=email_server_credentials.username,\n    )\n\n@flow\ndef example_flow():\n    try:\n        1 / 0\n    except Exception as exc:\n        notify_exc_by_email(exc)\n        raise\n\nexample_flow()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-email</code> with <code>pip</code>:</p> <pre><code>pip install prefect-email\n</code></pre> <p>Then, register to view the block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_email\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p> <p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#saving-credentials-to-block","title":"Saving credentials to block","text":"<p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p> <p>Below is a walkthrough on saving block documents through code.</p> <p>Create a short script, replacing the placeholders.</p> <pre><code>from prefect_email import EmailServerCredentials\n\ncredentials = EmailServerCredentials(\n    username=\"EMAIL-ADDRESS-PLACEHOLDER\",\n    password=\"PASSWORD-PLACEHOLDER\",  # must be an app password\n)\ncredentials.save(\"BLOCK-NAME-PLACEHOLDER\")\n</code></pre> <p>Congrats! You can now easily load the saved block, which holds your credentials:</p> <pre><code>from prefect_email import EmailServerCredentials\n\nEmailServerCredentials.load(\"BLOCK_NAME_PLACEHOLDER\")\n</code></pre> <p>Registering blocks</p> <p>Register blocks in this module to view and edit them on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_email\n</code></pre> <p>A list of available blocks in <code>prefect-email</code> and their setup instructions can be found here.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-email</code>, feel free to open an issue in the prefect-email repository.</p> <p>If you have any questions or issues while using <code>prefect-email</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-email</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-email</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"blocks_catalog/","title":"Blocks Catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-email</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud, first install the required packages, then <pre><code>prefect block register -m prefect_email\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"blocks_catalog/#credentials-module","title":"Credentials Module","text":"<p>EmailServerCredentials</p> <p>Block used to manage generic email server authentication. It is recommended you use a Google App Password if you use Gmail.</p> <p>To load the EmailServerCredentials: <pre><code>from prefect import flow\nfrom prefect_email.credentials import EmailServerCredentials\n\n@flow\ndef my_flow():\n    my_block = EmailServerCredentials.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Credentials Module under Examples Catalog.</p>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_email.credentials","title":"<code>prefect_email.credentials</code>","text":"<p>Credential classes used to perform authenticated interactions with email services</p>"},{"location":"credentials/#prefect_email.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_email.credentials.EmailServerCredentials","title":"<code>EmailServerCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Block used to manage generic email server authentication. It is recommended you use a Google App Password if you use Gmail.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>Optional[str]</code> <p>The username to use for authentication to the server. Unnecessary if SMTP login is not required.</p> <code>password</code> <code>SecretStr</code> <p>The password to use for authentication to the server. Unnecessary if SMTP login is not required.</p> <code>smtp_server</code> <code>Union[SMTPServer, str]</code> <p>Either the hostname of the SMTP server, or one of the keys from the built-in SMTPServer Enum members, like \"gmail\".</p> <code>smtp_type</code> <code>Union[SMTPType, str]</code> <p>Either \"SSL\", \"STARTTLS\", or \"INSECURE\".</p> <code>smtp_port</code> <code>Optional[int]</code> <p>If provided, overrides the smtp_type's default port number.</p> Example <p>Load stored email server credentials: <pre><code>from prefect_email import EmailServerCredentials\nemail_credentials_block = EmailServerCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_email/credentials.py</code> <pre><code>class EmailServerCredentials(Block):\n\"\"\"\n    Block used to manage generic email server authentication.\n    It is recommended you use a\n    [Google App Password](https://support.google.com/accounts/answer/185833)\n    if you use Gmail.\n\n    Attributes:\n        username: The username to use for authentication to the server.\n            Unnecessary if SMTP login is not required.\n        password: The password to use for authentication to the server.\n            Unnecessary if SMTP login is not required.\n        smtp_server: Either the hostname of the SMTP server, or one of the\n            keys from the built-in SMTPServer Enum members, like \"gmail\".\n        smtp_type: Either \"SSL\", \"STARTTLS\", or \"INSECURE\".\n        smtp_port: If provided, overrides the smtp_type's default port number.\n\n    Example:\n        Load stored email server credentials:\n        ```python\n        from prefect_email import EmailServerCredentials\n        email_credentials_block = EmailServerCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"  # noqa E501\n\n    _block_type_name = \"Email Server Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3PcxFuO9XUqs7wU9MiUBMg/ca740e27815d15528373aced667f58b9/email__1_.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-email/credentials/#prefect_email.credentials.EmailServerCredentials\"  # noqa\n\n    username: Optional[str] = Field(\n        default=None,\n        description=(\n            \"The username to use for authentication to the server. \"\n            \"Unnecessary if SMTP login is not required.\"\n        ),\n    )\n    password: SecretStr = Field(\n        default_factory=partial(SecretStr, \"\"),\n        description=(\n            \"The password to use for authentication to the server. \"\n            \"Unnecessary if SMTP login is not required.\"\n        ),\n    )\n    smtp_server: Union[SMTPServer, str] = Field(\n        default=SMTPServer.GMAIL,\n        description=(\n            \"Either the hostname of the SMTP server, or one of the \"\n            \"keys from the built-in SMTPServer Enum members, like 'gmail'.\"\n        ),\n        title=\"SMTP Server\",\n    )\n    smtp_type: Union[SMTPType, str] = Field(\n        default=SMTPType.SSL,\n        description=(\"Either 'SSL', 'STARTTLS', or 'INSECURE'.\"),\n        title=\"SMTP Type\",\n    )\n    smtp_port: Optional[int] = Field(\n        default=None,\n        description=(\"If provided, overrides the smtp_type's default port number.\"),\n        title=\"SMTP Port\",\n    )\n\n    @validator(\"smtp_server\", pre=True)\n    def _cast_smtp_server(cls, value):\n\"\"\"\n        Cast the smtp_server to an SMTPServer Enum member, if valid.\n        \"\"\"\n        return _cast_to_enum(value, SMTPServer)\n\n    @validator(\"smtp_type\", pre=True)\n    def _cast_smtp_type(cls, value):\n\"\"\"\n        Cast the smtp_type to an SMTPType Enum member, if valid.\n        \"\"\"\n        if isinstance(value, int):\n            return SMTPType(value)\n        return _cast_to_enum(value, SMTPType, restrict=True)\n\n    def get_server(self) -&gt; SMTP:\n\"\"\"\n        Gets an authenticated SMTP server.\n\n        Returns:\n            SMTP: An authenticated SMTP server.\n\n        Example:\n            Gets a GMail SMTP server through defaults.\n            ```python\n            from prefect import flow\n            from prefect_email import EmailServerCredentials\n\n            @flow\n            def example_get_server_flow():\n                email_server_credentials = EmailServerCredentials(\n                    username=\"username@gmail.com\",\n                    password=\"password\",\n                )\n                server = email_server_credentials.get_server()\n                return server\n\n            example_get_server_flow()\n            ```\n        \"\"\"\n        smtp_server = self.smtp_server\n        if isinstance(smtp_server, SMTPServer):\n            smtp_server = smtp_server.value\n\n        smtp_type = self.smtp_type\n        smtp_port = self.smtp_port\n        if smtp_port is None:\n            smtp_port = smtp_type.value\n\n        if smtp_type == SMTPType.INSECURE:\n            server = SMTP(smtp_server, smtp_port)\n        else:\n            context = ssl.create_default_context()\n            if smtp_type == SMTPType.SSL:\n                server = SMTP_SSL(smtp_server, smtp_port, context=context)\n            elif smtp_type == SMTPType.STARTTLS:\n                server = SMTP(smtp_server, smtp_port)\n                server.starttls(context=context)\n            if self.username is not None:\n                server.login(self.username, self.password.get_secret_value())\n\n        return server\n</code></pre>"},{"location":"credentials/#prefect_email.credentials.EmailServerCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_email.credentials.EmailServerCredentials.get_server","title":"<code>get_server()</code>","text":"<p>Gets an authenticated SMTP server.</p> <p>Returns:</p> Name Type Description <code>SMTP</code> <code>SMTP</code> <p>An authenticated SMTP server.</p> Example <p>Gets a GMail SMTP server through defaults. <pre><code>from prefect import flow\nfrom prefect_email import EmailServerCredentials\n\n@flow\ndef example_get_server_flow():\n    email_server_credentials = EmailServerCredentials(\n        username=\"username@gmail.com\",\n        password=\"password\",\n    )\n    server = email_server_credentials.get_server()\n    return server\n\nexample_get_server_flow()\n</code></pre></p> Source code in <code>prefect_email/credentials.py</code> <pre><code>def get_server(self) -&gt; SMTP:\n\"\"\"\n    Gets an authenticated SMTP server.\n\n    Returns:\n        SMTP: An authenticated SMTP server.\n\n    Example:\n        Gets a GMail SMTP server through defaults.\n        ```python\n        from prefect import flow\n        from prefect_email import EmailServerCredentials\n\n        @flow\n        def example_get_server_flow():\n            email_server_credentials = EmailServerCredentials(\n                username=\"username@gmail.com\",\n                password=\"password\",\n            )\n            server = email_server_credentials.get_server()\n            return server\n\n        example_get_server_flow()\n        ```\n    \"\"\"\n    smtp_server = self.smtp_server\n    if isinstance(smtp_server, SMTPServer):\n        smtp_server = smtp_server.value\n\n    smtp_type = self.smtp_type\n    smtp_port = self.smtp_port\n    if smtp_port is None:\n        smtp_port = smtp_type.value\n\n    if smtp_type == SMTPType.INSECURE:\n        server = SMTP(smtp_server, smtp_port)\n    else:\n        context = ssl.create_default_context()\n        if smtp_type == SMTPType.SSL:\n            server = SMTP_SSL(smtp_server, smtp_port, context=context)\n        elif smtp_type == SMTPType.STARTTLS:\n            server = SMTP(smtp_server, smtp_port)\n            server.starttls(context=context)\n        if self.username is not None:\n            server.login(self.username, self.password.get_secret_value())\n\n    return server\n</code></pre>"},{"location":"credentials/#prefect_email.credentials.SMTPServer","title":"<code>SMTPServer</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Server used to send email.</p> Source code in <code>prefect_email/credentials.py</code> <pre><code>class SMTPServer(Enum):\n\"\"\"\n    Server used to send email.\n    \"\"\"\n\n    AOL = \"smtp.aol.com\"\n    ATT = \"smtp.mail.att.net\"\n    COMCAST = \"smtp.comcast.net\"\n    ICLOUD = \"smtp.mail.me.com\"\n    GMAIL = \"smtp.gmail.com\"\n    OUTLOOK = \"smtp-mail.outlook.com\"\n    YAHOO = \"smtp.mail.yahoo.com\"\n</code></pre>"},{"location":"credentials/#prefect_email.credentials.SMTPType","title":"<code>SMTPType</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Protocols used to secure email transmissions.</p> Source code in <code>prefect_email/credentials.py</code> <pre><code>class SMTPType(Enum):\n\"\"\"\n    Protocols used to secure email transmissions.\n    \"\"\"\n\n    SSL = 465\n    STARTTLS = 587\n    INSECURE = 25\n</code></pre>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-email</code>.</p>"},{"location":"examples_catalog/#credentials-module","title":"Credentials Module","text":"<p>Gets a GMail SMTP server through defaults. <pre><code>from prefect import flow\nfrom prefect_email import EmailServerCredentials\n\n@flow\ndef example_get_server_flow():\n    email_server_credentials = EmailServerCredentials(\n        username=\"username@gmail.com\",\n        password=\"password\",\n    )\n    server = email_server_credentials.get_server()\n    return server\n\nexample_get_server_flow()\n</code></pre></p>"},{"location":"message/","title":"Message","text":""},{"location":"message/#prefect_email.message","title":"<code>prefect_email.message</code>","text":"<p>Tasks for interacting with email message services</p>"},{"location":"message/#prefect_email.message-classes","title":"Classes","text":""},{"location":"message/#prefect_email.message-functions","title":"Functions","text":""},{"location":"message/#prefect_email.message.email_send_message","title":"<code>email_send_message(subject, msg, email_server_credentials, msg_plain=None, email_from=None, email_to=None, email_to_cc=None, email_to_bcc=None, attachments=None)</code>  <code>async</code>","text":"<p>Sends an email message from an authenticated email service over SMTP. Sending messages containing HTML code is supported - the default MIME type is set to the text/html.</p> <p>Parameters:</p> Name Type Description Default <code>subject</code> <code>str</code> <p>The subject line of the email.</p> required <code>msg</code> <code>str</code> <p>The contents of the email, added as html; can be used in combination with msg_plain.</p> required <code>msg_plain</code> <code>Optional[str]</code> <p>The contents of the email as plain text, can be used in combination with msg.</p> <code>None</code> <code>email_to</code> <code>Optional[Union[str, List[str]]]</code> <p>The email addresses to send the message to, separated by commas. If a list is provided, will join the items, separated by commas.</p> <code>None</code> <code>email_to_cc</code> <code>Optional[Union[str, List[str]]]</code> <p>Additional email addresses to send the message to as cc, separated by commas. If a list is provided, will join the items, separated by commas.</p> <code>None</code> <code>email_to_bcc</code> <code>Optional[Union[str, List[str]]]</code> <p>Additional email addresses to send the message to as bcc, separated by commas. If a list is provided, will join the items, separated by commas.</p> <code>None</code> <code>attachments</code> <code>Optional[List[str]]</code> <p>Names of files that should be sent as attachment.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MimeText</code> <p>The MIME Multipart message of the email.</p> Example <p>Sends a notification email to someone@gmail.com. <pre><code>from prefect import flow\nfrom prefect_email import EmailServerCredentials, email_send_message\n\n@flow\ndef example_email_send_message_flow():\n    email_server_credentials = EmailServerCredentials(\n        username=\"username@email.com\",\n        password=\"password\",\n    )\n    subject = email_send_message(\n        email_server_credentials=email_server_credentials,\n        subject=\"Example Flow Notification\",\n        msg=\"This proves email_send_message works!\",\n        email_to=\"someone@email.com\",\n    )\n    return subject\n\nexample_email_send_message_flow()\n</code></pre></p> Source code in <code>prefect_email/message.py</code> <pre><code>@task\nasync def email_send_message(\n    subject: str,\n    msg: str,\n    email_server_credentials: \"EmailServerCredentials\",\n    msg_plain: Optional[str] = None,\n    email_from: Optional[str] = None,\n    email_to: Optional[Union[str, List[str]]] = None,\n    email_to_cc: Optional[Union[str, List[str]]] = None,\n    email_to_bcc: Optional[Union[str, List[str]]] = None,\n    attachments: Optional[List[str]] = None,\n):\n\"\"\"\n    Sends an email message from an authenticated email service over SMTP.\n    Sending messages containing HTML code is supported - the default MIME\n    type is set to the text/html.\n\n    Args:\n        subject: The subject line of the email.\n        msg: The contents of the email, added as html; can be used in\n            combination with msg_plain.\n        msg_plain: The contents of the email as plain text,\n            can be used in combination with msg.\n        email_to: The email addresses to send the message to, separated by commas.\n            If a list is provided, will join the items, separated by commas.\n        email_to_cc: Additional email addresses to send the message to as cc,\n            separated by commas. If a list is provided, will join the items,\n            separated by commas.\n        email_to_bcc: Additional email addresses to send the message to as bcc,\n            separated by commas. If a list is provided, will join the items,\n            separated by commas.\n        attachments: Names of files that should be sent as attachment.\n\n    Returns:\n        MimeText: The MIME Multipart message of the email.\n\n    Example:\n        Sends a notification email to someone@gmail.com.\n        ```python\n        from prefect import flow\n        from prefect_email import EmailServerCredentials, email_send_message\n\n        @flow\n        def example_email_send_message_flow():\n            email_server_credentials = EmailServerCredentials(\n                username=\"username@email.com\",\n                password=\"password\",\n            )\n            subject = email_send_message(\n                email_server_credentials=email_server_credentials,\n                subject=\"Example Flow Notification\",\n                msg=\"This proves email_send_message works!\",\n                email_to=\"someone@email.com\",\n            )\n            return subject\n\n        example_email_send_message_flow()\n        ```\n    \"\"\"\n    message = MIMEMultipart()\n    message[\"Subject\"] = subject\n    message[\"From\"] = email_from or email_server_credentials.username\n\n    email_to_dict = {\"To\": email_to, \"Cc\": email_to_cc, \"Bcc\": email_to_bcc}\n    if all(val is None for val in email_to_dict.values()):\n        raise ValueError(\n            \"One of email_to, email_to_cc, or email_to_bcc must be specified\"\n        )\n\n    for key, val in email_to_dict.items():\n        if isinstance(val, list):\n            val = \", \".join(val)\n        message[key] = val\n\n    # First add the message in plain text, then the HTML version;\n    # email clients try to render the last part first\n    if msg_plain:\n        message.attach(MIMEText(msg_plain, \"plain\"))\n    if msg:\n        message.attach(MIMEText(msg, \"html\"))\n\n    for filepath in attachments or []:\n        with open(filepath, \"rb\") as attachment:\n            part = MIMEBase(\"application\", \"octet-stream\")\n            part.set_payload(attachment.read())\n\n        encoders.encode_base64(part)\n        filename = os.path.basename(filepath)\n        part.add_header(\n            \"Content-Disposition\",\n            f\"attachment; filename= {filename}\",\n        )\n        message.attach(part)\n\n    with email_server_credentials.get_server() as server:\n        partial_send_message = partial(server.send_message, message)\n        await to_thread.run_sync(partial_send_message)\n\n    return message\n</code></pre>"}]}