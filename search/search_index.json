{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-email Welcome! prefect-email is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows that interacts with email services.. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-email with pip : pip install prefect-email Write and run a flow from prefect import flow from prefect_email import EmailCredentials , email_send_message @flow def example_email_send_message_flow (): email_credentials = EmailCredentials ( username = \"username@email.com\" , password = \"password\" , ) subject = email_send_message ( email_credentials = email_credentials , subject = \"Example Flow Notification\" , msg = \"This proves email_send_message works!\" , email_to = \"someone@email.com\" , ) return subject example_email_send_message_flow () Resources If you encounter and bugs while using prefect-email , feel free to open an issue in the prefect-email repository. If you have any questions or issues while using prefect-email , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-email for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-email.git cd prefect-email/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-email","text":"","title":"prefect-email"},{"location":"#welcome","text":"prefect-email is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows that interacts with email services..","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-email with pip : pip install prefect-email","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_email import EmailCredentials , email_send_message @flow def example_email_send_message_flow (): email_credentials = EmailCredentials ( username = \"username@email.com\" , password = \"password\" , ) subject = email_send_message ( email_credentials = email_credentials , subject = \"Example Flow Notification\" , msg = \"This proves email_send_message works!\" , email_to = \"someone@email.com\" , ) return subject example_email_send_message_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter and bugs while using prefect-email , feel free to open an issue in the prefect-email repository. If you have any questions or issues while using prefect-email , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-email for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-email.git cd prefect-email/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_email.credentials Credential classes used to perform authenticated interactions with email services EmailCredentials dataclass Dataclass used to manage generic email authentication. It is recommended you use a Google App Password if you use Gmail. Parameters: Name Type Description Default username str The username to use for authentication to the server. required password str The password to use for authentication to the server. required smtp_server Union[str, prefect_email.credentials.SMTPServer] Either the hostname of the SMTP server, or one of the keys from the built-in SMTPServer Enum members, like \"gmail\". <SMTPServer.GMAIL: 'smtp.gmail.com'> smtp_type Union[str, prefect_email.credentials.SMTPType] Either \"SSL\", \"STARTTLS\", or \"INSECURE\". <SMTPType.SSL: 465> smtp_port Optional[int] If provided, overrides the smtp_type's default port number. None Source code in prefect_email/credentials.py class EmailCredentials : \"\"\" Dataclass used to manage generic email authentication. It is recommended you use a [Google App Password](https://support.google.com/accounts/answer/185833) if you use Gmail. Args: username: The username to use for authentication to the server. password: The password to use for authentication to the server. smtp_server: Either the hostname of the SMTP server, or one of the keys from the built-in SMTPServer Enum members, like \"gmail\". smtp_type: Either \"SSL\", \"STARTTLS\", or \"INSECURE\". smtp_port: If provided, overrides the smtp_type's default port number. \"\"\" username : str password : str smtp_server : Optional [ Union [ str , SMTPServer ]] = SMTPServer . GMAIL smtp_type : Optional [ Union [ str , SMTPType ]] = SMTPType . SSL smtp_port : Optional [ int ] = None def get_server ( self ) -> SMTP : \"\"\" Gets an authenticated SMTP server. Returns: SMTP: An authenticated SMTP server. Example: Gets a GMail SMTP server through defaults. ```python from prefect import flow from prefect_email import EmailCredentials @flow def example_get_server_flow(): email_credentials = EmailCredentials( username=\"username@gmail.com\", password=\"password\", ) server = email_credentials.get_server() return server example_get_server_flow() ``` \"\"\" smtp_server = _cast_to_enum ( self . smtp_server , SMTPServer ) if isinstance ( smtp_server , SMTPServer ): smtp_server = smtp_server . value smtp_type = _cast_to_enum ( self . smtp_type , SMTPType , restrict = True ) smtp_port = self . smtp_port if smtp_port is None : smtp_port = smtp_type . value if smtp_type == SMTPType . INSECURE : server = SMTP ( smtp_server , smtp_port ) else : context = ssl . create_default_context () if smtp_type == SMTPType . SSL : server = SMTP_SSL ( smtp_server , smtp_port , context = context ) elif smtp_type == SMTPType . STARTTLS : server = SMTP ( smtp_server , smtp_port ) server . starttls ( context = context ) server . login ( self . username , self . password ) return server get_server ( self ) Gets an authenticated SMTP server. Returns: Type Description SMTP An authenticated SMTP server. Examples: Gets a GMail SMTP server through defaults. from prefect import flow from prefect_email import EmailCredentials @flow def example_get_server_flow (): email_credentials = EmailCredentials ( username = \"username@gmail.com\" , password = \"password\" , ) server = email_credentials . get_server () return server example_get_server_flow () Source code in prefect_email/credentials.py def get_server ( self ) -> SMTP : \"\"\" Gets an authenticated SMTP server. Returns: SMTP: An authenticated SMTP server. Example: Gets a GMail SMTP server through defaults. ```python from prefect import flow from prefect_email import EmailCredentials @flow def example_get_server_flow(): email_credentials = EmailCredentials( username=\"username@gmail.com\", password=\"password\", ) server = email_credentials.get_server() return server example_get_server_flow() ``` \"\"\" smtp_server = _cast_to_enum ( self . smtp_server , SMTPServer ) if isinstance ( smtp_server , SMTPServer ): smtp_server = smtp_server . value smtp_type = _cast_to_enum ( self . smtp_type , SMTPType , restrict = True ) smtp_port = self . smtp_port if smtp_port is None : smtp_port = smtp_type . value if smtp_type == SMTPType . INSECURE : server = SMTP ( smtp_server , smtp_port ) else : context = ssl . create_default_context () if smtp_type == SMTPType . SSL : server = SMTP_SSL ( smtp_server , smtp_port , context = context ) elif smtp_type == SMTPType . STARTTLS : server = SMTP ( smtp_server , smtp_port ) server . starttls ( context = context ) server . login ( self . username , self . password ) return server SMTPServer Server used to send email. Source code in prefect_email/credentials.py class SMTPServer ( Enum ): \"\"\" Server used to send email. \"\"\" AOL = \"smtp.aol.com\" ATT = \"smtp.mail.att.net\" COMCAST = \"smtp.comcast.net\" ICLOUD = \"smtp.mail.me.com\" GMAIL = \"smtp.gmail.com\" OUTLOOK = \"smtp-mail.outlook.com\" YAHOO = \"smtp.mail.yahoo.com\" SMTPType Protocols used to secure email transmissions. Source code in prefect_email/credentials.py class SMTPType ( Enum ): \"\"\" Protocols used to secure email transmissions. \"\"\" SSL = 465 STARTTLS = 465 INSECURE = 25","title":"Credentials"},{"location":"credentials/#prefect_email.credentials","text":"Credential classes used to perform authenticated interactions with email services","title":"credentials"},{"location":"credentials/#prefect_email.credentials.EmailCredentials","text":"Dataclass used to manage generic email authentication. It is recommended you use a Google App Password if you use Gmail. Parameters: Name Type Description Default username str The username to use for authentication to the server. required password str The password to use for authentication to the server. required smtp_server Union[str, prefect_email.credentials.SMTPServer] Either the hostname of the SMTP server, or one of the keys from the built-in SMTPServer Enum members, like \"gmail\". <SMTPServer.GMAIL: 'smtp.gmail.com'> smtp_type Union[str, prefect_email.credentials.SMTPType] Either \"SSL\", \"STARTTLS\", or \"INSECURE\". <SMTPType.SSL: 465> smtp_port Optional[int] If provided, overrides the smtp_type's default port number. None Source code in prefect_email/credentials.py class EmailCredentials : \"\"\" Dataclass used to manage generic email authentication. It is recommended you use a [Google App Password](https://support.google.com/accounts/answer/185833) if you use Gmail. Args: username: The username to use for authentication to the server. password: The password to use for authentication to the server. smtp_server: Either the hostname of the SMTP server, or one of the keys from the built-in SMTPServer Enum members, like \"gmail\". smtp_type: Either \"SSL\", \"STARTTLS\", or \"INSECURE\". smtp_port: If provided, overrides the smtp_type's default port number. \"\"\" username : str password : str smtp_server : Optional [ Union [ str , SMTPServer ]] = SMTPServer . GMAIL smtp_type : Optional [ Union [ str , SMTPType ]] = SMTPType . SSL smtp_port : Optional [ int ] = None def get_server ( self ) -> SMTP : \"\"\" Gets an authenticated SMTP server. Returns: SMTP: An authenticated SMTP server. Example: Gets a GMail SMTP server through defaults. ```python from prefect import flow from prefect_email import EmailCredentials @flow def example_get_server_flow(): email_credentials = EmailCredentials( username=\"username@gmail.com\", password=\"password\", ) server = email_credentials.get_server() return server example_get_server_flow() ``` \"\"\" smtp_server = _cast_to_enum ( self . smtp_server , SMTPServer ) if isinstance ( smtp_server , SMTPServer ): smtp_server = smtp_server . value smtp_type = _cast_to_enum ( self . smtp_type , SMTPType , restrict = True ) smtp_port = self . smtp_port if smtp_port is None : smtp_port = smtp_type . value if smtp_type == SMTPType . INSECURE : server = SMTP ( smtp_server , smtp_port ) else : context = ssl . create_default_context () if smtp_type == SMTPType . SSL : server = SMTP_SSL ( smtp_server , smtp_port , context = context ) elif smtp_type == SMTPType . STARTTLS : server = SMTP ( smtp_server , smtp_port ) server . starttls ( context = context ) server . login ( self . username , self . password ) return server","title":"EmailCredentials"},{"location":"credentials/#prefect_email.credentials.EmailCredentials.get_server","text":"Gets an authenticated SMTP server. Returns: Type Description SMTP An authenticated SMTP server. Examples: Gets a GMail SMTP server through defaults. from prefect import flow from prefect_email import EmailCredentials @flow def example_get_server_flow (): email_credentials = EmailCredentials ( username = \"username@gmail.com\" , password = \"password\" , ) server = email_credentials . get_server () return server example_get_server_flow () Source code in prefect_email/credentials.py def get_server ( self ) -> SMTP : \"\"\" Gets an authenticated SMTP server. Returns: SMTP: An authenticated SMTP server. Example: Gets a GMail SMTP server through defaults. ```python from prefect import flow from prefect_email import EmailCredentials @flow def example_get_server_flow(): email_credentials = EmailCredentials( username=\"username@gmail.com\", password=\"password\", ) server = email_credentials.get_server() return server example_get_server_flow() ``` \"\"\" smtp_server = _cast_to_enum ( self . smtp_server , SMTPServer ) if isinstance ( smtp_server , SMTPServer ): smtp_server = smtp_server . value smtp_type = _cast_to_enum ( self . smtp_type , SMTPType , restrict = True ) smtp_port = self . smtp_port if smtp_port is None : smtp_port = smtp_type . value if smtp_type == SMTPType . INSECURE : server = SMTP ( smtp_server , smtp_port ) else : context = ssl . create_default_context () if smtp_type == SMTPType . SSL : server = SMTP_SSL ( smtp_server , smtp_port , context = context ) elif smtp_type == SMTPType . STARTTLS : server = SMTP ( smtp_server , smtp_port ) server . starttls ( context = context ) server . login ( self . username , self . password ) return server","title":"get_server()"},{"location":"credentials/#prefect_email.credentials.SMTPServer","text":"Server used to send email. Source code in prefect_email/credentials.py class SMTPServer ( Enum ): \"\"\" Server used to send email. \"\"\" AOL = \"smtp.aol.com\" ATT = \"smtp.mail.att.net\" COMCAST = \"smtp.comcast.net\" ICLOUD = \"smtp.mail.me.com\" GMAIL = \"smtp.gmail.com\" OUTLOOK = \"smtp-mail.outlook.com\" YAHOO = \"smtp.mail.yahoo.com\"","title":"SMTPServer"},{"location":"credentials/#prefect_email.credentials.SMTPType","text":"Protocols used to secure email transmissions. Source code in prefect_email/credentials.py class SMTPType ( Enum ): \"\"\" Protocols used to secure email transmissions. \"\"\" SSL = 465 STARTTLS = 465 INSECURE = 25","title":"SMTPType"},{"location":"message/","text":"prefect_email.message Tasks for interacting with email message services email_send_message ( subject , msg , email_credentials , msg_plain = None , email_from = None , email_to = None , email_to_cc = None , email_to_bcc = None , attachments = None ) async Sends an email message from an authenticated email service over SMTP. Sending messages containing HTML code is supported - the default MIME type is set to the text/html. Parameters: Name Type Description Default subject str The subject line of the email. required msg str The contents of the email, added as html; can be used in combination with msg_plain. required msg_plain Optional[str] The contents of the email as plain text, can be used in combination with msg. None email_to Union[str, List[str]] The email addresses to send the message to, separated by commas. If a list is provided, will join the items, separated by commas. None email_to_cc Union[str, List[str]] Additional email addresses to send the message to as cc, separated by commas. If a list is provided, will join the items, separated by commas. None email_to_bcc Union[str, List[str]] Additional email addresses to send the message to as bcc, separated by commas. If a list is provided, will join the items, separated by commas. None attachments Optional[List[str]] Names of files that should be sent as attachment. None Returns: Type Description MimeText The MIME Multipart message of the email. Examples: Sends a notification email to someone@gmail.com. from prefect import flow from prefect_email import EmailCredentials , email_send_message @flow def example_email_send_message_flow (): email_credentials = EmailCredentials ( username = \"username@email.com\" , password = \"password\" , ) subject = email_send_message ( email_credentials = email_credentials , subject = \"Example Flow Notification\" , msg = \"This proves email_send_message works!\" , email_to = \"someone@email.com\" , ) return subject example_email_send_message_flow () Source code in prefect_email/message.py @task async def email_send_message ( subject : str , msg : str , email_credentials : \"EmailCredentials\" , msg_plain : Optional [ str ] = None , email_from : Optional [ str ] = None , email_to : Optional [ Union [ str , List [ str ]]] = None , email_to_cc : Optional [ Union [ str , List [ str ]]] = None , email_to_bcc : Optional [ Union [ str , List [ str ]]] = None , attachments : Optional [ List [ str ]] = None , ): \"\"\" Sends an email message from an authenticated email service over SMTP. Sending messages containing HTML code is supported - the default MIME type is set to the text/html. Args: subject: The subject line of the email. msg: The contents of the email, added as html; can be used in combination with msg_plain. msg_plain: The contents of the email as plain text, can be used in combination with msg. email_to: The email addresses to send the message to, separated by commas. If a list is provided, will join the items, separated by commas. email_to_cc: Additional email addresses to send the message to as cc, separated by commas. If a list is provided, will join the items, separated by commas. email_to_bcc: Additional email addresses to send the message to as bcc, separated by commas. If a list is provided, will join the items, separated by commas. attachments: Names of files that should be sent as attachment. Returns: MimeText: The MIME Multipart message of the email. Example: Sends a notification email to someone@gmail.com. ```python from prefect import flow from prefect_email import EmailCredentials, email_send_message @flow def example_email_send_message_flow(): email_credentials = EmailCredentials( username=\"username@email.com\", password=\"password\", ) subject = email_send_message( email_credentials=email_credentials, subject=\"Example Flow Notification\", msg=\"This proves email_send_message works!\", email_to=\"someone@email.com\", ) return subject example_email_send_message_flow() ``` \"\"\" message = MIMEMultipart () message [ \"Subject\" ] = subject message [ \"From\" ] = email_from or email_credentials . username email_to_dict = { \"To\" : email_to , \"Cc\" : email_to_cc , \"Bcc\" : email_to_bcc } if all ( val is None for val in email_to_dict . values ()): raise ValueError ( \"One of email_to, email_to_cc, or email_to_bcc must be specified\" ) for key , val in email_to_dict . items (): if isinstance ( val , list ): val = \", \" . join ( val ) message [ key ] = val # First add the message in plain text, then the HTML version; # email clients try to render the last part first if msg_plain : message . attach ( MIMEText ( msg_plain , \"plain\" )) if msg : message . attach ( MIMEText ( msg , \"html\" )) for filepath in attachments or []: with open ( filepath , \"rb\" ) as attachment : part = MIMEBase ( \"application\" , \"octet-stream\" ) part . set_payload ( attachment . read ()) encoders . encode_base64 ( part ) filename = os . path . basename ( filepath ) part . add_header ( \"Content-Disposition\" , f \"attachment; filename= { filename } \" , ) message . attach ( part ) with email_credentials . get_server () as server : partial_send_message = partial ( server . send_message , message ) await to_thread . run_sync ( partial_send_message ) return message","title":"Message"},{"location":"message/#prefect_email.message","text":"Tasks for interacting with email message services","title":"message"},{"location":"message/#prefect_email.message.email_send_message","text":"Sends an email message from an authenticated email service over SMTP. Sending messages containing HTML code is supported - the default MIME type is set to the text/html. Parameters: Name Type Description Default subject str The subject line of the email. required msg str The contents of the email, added as html; can be used in combination with msg_plain. required msg_plain Optional[str] The contents of the email as plain text, can be used in combination with msg. None email_to Union[str, List[str]] The email addresses to send the message to, separated by commas. If a list is provided, will join the items, separated by commas. None email_to_cc Union[str, List[str]] Additional email addresses to send the message to as cc, separated by commas. If a list is provided, will join the items, separated by commas. None email_to_bcc Union[str, List[str]] Additional email addresses to send the message to as bcc, separated by commas. If a list is provided, will join the items, separated by commas. None attachments Optional[List[str]] Names of files that should be sent as attachment. None Returns: Type Description MimeText The MIME Multipart message of the email. Examples: Sends a notification email to someone@gmail.com. from prefect import flow from prefect_email import EmailCredentials , email_send_message @flow def example_email_send_message_flow (): email_credentials = EmailCredentials ( username = \"username@email.com\" , password = \"password\" , ) subject = email_send_message ( email_credentials = email_credentials , subject = \"Example Flow Notification\" , msg = \"This proves email_send_message works!\" , email_to = \"someone@email.com\" , ) return subject example_email_send_message_flow () Source code in prefect_email/message.py @task async def email_send_message ( subject : str , msg : str , email_credentials : \"EmailCredentials\" , msg_plain : Optional [ str ] = None , email_from : Optional [ str ] = None , email_to : Optional [ Union [ str , List [ str ]]] = None , email_to_cc : Optional [ Union [ str , List [ str ]]] = None , email_to_bcc : Optional [ Union [ str , List [ str ]]] = None , attachments : Optional [ List [ str ]] = None , ): \"\"\" Sends an email message from an authenticated email service over SMTP. Sending messages containing HTML code is supported - the default MIME type is set to the text/html. Args: subject: The subject line of the email. msg: The contents of the email, added as html; can be used in combination with msg_plain. msg_plain: The contents of the email as plain text, can be used in combination with msg. email_to: The email addresses to send the message to, separated by commas. If a list is provided, will join the items, separated by commas. email_to_cc: Additional email addresses to send the message to as cc, separated by commas. If a list is provided, will join the items, separated by commas. email_to_bcc: Additional email addresses to send the message to as bcc, separated by commas. If a list is provided, will join the items, separated by commas. attachments: Names of files that should be sent as attachment. Returns: MimeText: The MIME Multipart message of the email. Example: Sends a notification email to someone@gmail.com. ```python from prefect import flow from prefect_email import EmailCredentials, email_send_message @flow def example_email_send_message_flow(): email_credentials = EmailCredentials( username=\"username@email.com\", password=\"password\", ) subject = email_send_message( email_credentials=email_credentials, subject=\"Example Flow Notification\", msg=\"This proves email_send_message works!\", email_to=\"someone@email.com\", ) return subject example_email_send_message_flow() ``` \"\"\" message = MIMEMultipart () message [ \"Subject\" ] = subject message [ \"From\" ] = email_from or email_credentials . username email_to_dict = { \"To\" : email_to , \"Cc\" : email_to_cc , \"Bcc\" : email_to_bcc } if all ( val is None for val in email_to_dict . values ()): raise ValueError ( \"One of email_to, email_to_cc, or email_to_bcc must be specified\" ) for key , val in email_to_dict . items (): if isinstance ( val , list ): val = \", \" . join ( val ) message [ key ] = val # First add the message in plain text, then the HTML version; # email clients try to render the last part first if msg_plain : message . attach ( MIMEText ( msg_plain , \"plain\" )) if msg : message . attach ( MIMEText ( msg , \"html\" )) for filepath in attachments or []: with open ( filepath , \"rb\" ) as attachment : part = MIMEBase ( \"application\" , \"octet-stream\" ) part . set_payload ( attachment . read ()) encoders . encode_base64 ( part ) filename = os . path . basename ( filepath ) part . add_header ( \"Content-Disposition\" , f \"attachment; filename= { filename } \" , ) message . attach ( part ) with email_credentials . get_server () as server : partial_send_message = partial ( server . send_message , message ) await to_thread . run_sync ( partial_send_message ) return message","title":"email_send_message()"}]}